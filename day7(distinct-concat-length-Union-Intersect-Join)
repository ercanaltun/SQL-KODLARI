CREATE TABLE workers
(
  id CHAR(9),
  name VARCHAR(50),
  state VARCHAR(50),
  salary SMALLINT,
  company VARCHAR(20)
);
INSERT INTO workers VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO workers VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO workers VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO workers VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO workers VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO workers VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO workers VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');
SELECT * FROM workers;

--Toplam salary değeri 2500 üzeri
--olan her bir çalışan için salary toplamını bulun.

Select name, Sum(salary) As "Total Salary"
From workers
Group by name
Having Sum(salary)>2500;--Group By dan sonra Where KULLANILMAZ

--Birden fazla çalışanı olan, her bir state için çalışan toplamlarını bulun.
Select state,count(state)As "Number of employees"
from workers
group by state
Having Count(state)>1--Having,group by dan sonra filtreleme için kullanılır

--Her bir state için değeri 3000'den az olan maximum salary değerlerini bulun.
Select state,max(salary)As "Maximum Salary"
from workers
group by state
having  max(salary)<3000

--Her bir company için değeri 2000'den fazla olan minimum salary değerlerini bulun.
Select company, min(salary)As "Minimum Salary"
from workers
group by company
having min(salary)>2000

------------------------------------------------------------------------------
------------------------------DISTINCT----------------------------------------
--DISTINCT clause: Tekrarlı terimlerden sadece 1 tanesini alır

--Tekrarsız isimleri çağırın
Select DISTINCT name
from workers

--Name değerlerini company kelime uzunluklarına göre sıralayın.
Select name,company
from workers
order by length(company)
--------------------------------------------------------------
----------------------CONCAT----------------------------------
Concat():concat fonksiyonu birden fazkla sutun ve

--Tüm name ve state değerlerini aynı sütunda çağırarak
--her bir sütun değerinin uzunluğuna göre sıralayın.
--1.Yol:
Select Concat(name,' ',state)As"Name and State"
from workers
order by length(name) + length(state) 

--2.Yol:
Select name || ' ' || state || ' ' || Length(name)+ Length(state) As"Name and States"
from workers
order by Length(name) + Length(state)

------------------------------------------------------------
--------------- UNION OPERATOR------------------------------
/*
--UNION Operator: 1) iki sorgu (query) sonucunu birleştirmk için kullanılır
 --               2) tekrarsız(unique) recordları veriri         
                  3)Tek bir sutuna çok sutun koyaniliriz
			      4)tek bir sutuna çok sutun koyarken mevcut data turune dikkat etmek gerekir

*/

--salary değeri 3000'den yüksek olan state değerlerini ve
--2000'den küçük olan name değerlerini tekrarsız olarak bulun.
Select state As "Name and State", salary
from workers 
where salary >3000

Union

Select name, salary
from workers 
where salary <2000;

--salary değeri 3000'den yüksek olan state değerlerini ve
--salary değeri 2000'den küçük olan name değerlerini tekrarsız olarak bulun.
Select state As "Name and State", salary
from workers 
where salary >3000

Union All-->Union ile aynı işi yapar.ancak tekrarlı değerleri de verir

Select name, salary,
from workers 
where salary <2000;

-------------------------------------------------------------------------------
----------------------------INTERSECT------------------------------------------
--INTERSECT Operator: İki sorgu (query) sonucunun ortak(common) değerlerini verir. 
--Unique(tekrarsız) recordları verir.

--salary değeri 1000'den yüksek, 2000'den az olan "ortak" name değerlerini bulun.
Select name 
from workers
where salary >1000

INTERSECT

Select name
from workers
where salary <2000

--salary değeri 2000'den az olan ve company değeri 
--IBM, APPLE yada MICROSOFT olan ortak "name" değerlerini bulun.
Select name
From workers
where salary<2000

Intersect

Select name
From workers
where company in('IBM','APPLE','MICROSOFT')

---------------------------------------------------------------------------------
--------------------------------EXCEPT-------------------------------------------
--EXCEPT Operator:hariç demektir.Bir sorgu sonucundan başka bir sorgu sonucunu 
--- çıkarmakiçin kullanılır. Unique(tekrarsız) recordları verir.


--salary değeri 3000'den az ve GOOGLE'da çalışmayan  name değerlerini bulun.
Select name 
from workers
Where salary<3000

EXCEPT

Select name 
from workers
Where company='GOOGLE'

---------------------------------------------------------------------------
-------------------------------JOINS---------------------------------------
CREATE TABLE my_companies
(
  company_id CHAR(3),
  company_name VARCHAR(20)
);
INSERT INTO my_companies VALUES(100, 'IBM');
INSERT INTO my_companies VALUES(101, 'GOOGLE');
INSERT INTO my_companies VALUES(102, 'MICROSOFT');
INSERT INTO my_companies VALUES(103, 'APPLE');
SELECT * FROM my_companies;
CREATE TABLE orders
(
  company_id CHAR(3),
  order_id CHAR(3),
  order_date DATE
);
INSERT INTO orders VALUES(101, 11, '17-Apr-2020');
INSERT INTO orders VALUES(102, 22, '18-Apr-2020');
INSERT INTO orders VALUES(103, 33, '19-Apr-2020');
INSERT INTO orders VALUES(104, 44, '20-Apr-2020');
INSERT INTO orders VALUES(105, 55, '21-Apr-2020');
SELECT * FROM orders;

/*
1)INNER JOINS =>2 Table 'ın kesiştiği alanı verir
2)LEFT JOIN   =>2 table 'dan(1.) tabloyu  verir(Kesişen yerleri de alır)     
3)RIGHT JOIN  =>2 table 'dan (2.) tabloyu  verir(Kesişen yerleri de alır)
4)FULL JOIN   =>İki table 'ında tüm data sınırı verir
5)SELF JOIN   =>tek table üzerinde çalışırken 2 table varmış gibi çalışır
*/

--1) INNER JOIN
--Ortak companyler için company_name, order_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc INNER JOIN orders o
ON mc.company_id = o.company_id;

-- 2) LEFT JOIN
--my_companies table'ındaki companyler için company_name, order_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc LEFT JOIN orders o
ON mc.company_id = o.company_id;

--3) RIGHT JOIN
--Orders table'ındaki company'ler için company_name, company_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc RIGHT JOIN orders o
ON mc.company_id = o.company_id;

--FULL JOIN
--İki table'dan da company_name, order_id ve order_date değerlerini çağırın.
SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc FULL JOIN orders o
ON mc.company_id = o.company_id;

drop table workers


CREATE TABLE workers
(
  id CHAR(2),
  name VARCHAR(20),
  title VARCHAR(60),
  manager_id CHAR(2)
);
INSERT INTO workers VALUES(1, 'Ali Can', 'SDET', 2);
INSERT INTO workers VALUES(2, 'John Walker', 'QA', 3);
INSERT INTO workers VALUES(3, 'Angie Star', 'QA Lead', 4);
INSERT INTO workers VALUES(4, 'Amy Sky', 'CEO', 5);
SELECT * FROM workers;

--SELF JOIN
--workers tablosunu kullanarak çalışanların yöneticilerini gösteren bir tablo hazırlayın.

Select employee.name As Employee, manager.name As manager
From workers employee Full Join workers manager
On employee.manager_id=manager.id
















